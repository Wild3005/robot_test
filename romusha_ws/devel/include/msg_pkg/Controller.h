// Generated by gencpp from file msg_pkg/Controller.msg
// DO NOT EDIT!


#ifndef MSG_PKG_MESSAGE_CONTROLLER_H
#define MSG_PKG_MESSAGE_CONTROLLER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_pkg
{
template <class ContainerAllocator>
struct Controller_
{
  typedef Controller_<ContainerAllocator> Type;

  Controller_()
    : velx(0.0)
    , vely(0.0)
    , angvel(0.0)  {
    }
  Controller_(const ContainerAllocator& _alloc)
    : velx(0.0)
    , vely(0.0)
    , angvel(0.0)  {
  (void)_alloc;
    }



   typedef float _velx_type;
  _velx_type velx;

   typedef float _vely_type;
  _vely_type vely;

   typedef float _angvel_type;
  _angvel_type angvel;





  typedef boost::shared_ptr< ::msg_pkg::Controller_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_pkg::Controller_<ContainerAllocator> const> ConstPtr;

}; // struct Controller_

typedef ::msg_pkg::Controller_<std::allocator<void> > Controller;

typedef boost::shared_ptr< ::msg_pkg::Controller > ControllerPtr;
typedef boost::shared_ptr< ::msg_pkg::Controller const> ControllerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_pkg::Controller_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_pkg::Controller_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_pkg::Controller_<ContainerAllocator1> & lhs, const ::msg_pkg::Controller_<ContainerAllocator2> & rhs)
{
  return lhs.velx == rhs.velx &&
    lhs.vely == rhs.vely &&
    lhs.angvel == rhs.angvel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_pkg::Controller_<ContainerAllocator1> & lhs, const ::msg_pkg::Controller_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::msg_pkg::Controller_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_pkg::Controller_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_pkg::Controller_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_pkg::Controller_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_pkg::Controller_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_pkg::Controller_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_pkg::Controller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "db828269e36b1326ea6e28d784881f34";
  }

  static const char* value(const ::msg_pkg::Controller_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdb828269e36b1326ULL;
  static const uint64_t static_value2 = 0xea6e28d784881f34ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_pkg::Controller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_pkg/Controller";
  }

  static const char* value(const ::msg_pkg::Controller_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_pkg::Controller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 velx\n"
"float32 vely\n"
"float32 angvel\n"
;
  }

  static const char* value(const ::msg_pkg::Controller_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_pkg::Controller_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.velx);
      stream.next(m.vely);
      stream.next(m.angvel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Controller_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_pkg::Controller_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_pkg::Controller_<ContainerAllocator>& v)
  {
    s << indent << "velx: ";
    Printer<float>::stream(s, indent + "  ", v.velx);
    s << indent << "vely: ";
    Printer<float>::stream(s, indent + "  ", v.vely);
    s << indent << "angvel: ";
    Printer<float>::stream(s, indent + "  ", v.angvel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_PKG_MESSAGE_CONTROLLER_H
